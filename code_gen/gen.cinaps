type funptr_record =
  { func_name : string
  ; other_param_tys : string list
  ; ret_ty : string }

let contains_substring s ~substr =
  let re = Str.regexp_string substr in
  try
    Str.search_forward re s 0 |> ignore;
    true
  with Not_found -> false

let strip_char char s =
  let re = Str.regexp_string (Printf.sprintf "%c" char) in
  Str.global_replace re "" s

let strip_chars chars s =
  Seq.fold_left (fun s c -> strip_char c s) s (String.to_seq chars)

let gen_lxc_container_funptr_field_c_glue ~func_name_suffix
    {func_name; other_param_tys; ret_ty} =
  let gen_func_arg_field param_and_ty_list =
    String.concat ", "
      (List.map
         (fun (name, ty) -> Printf.sprintf "%s %s" ty name)
         param_and_ty_list)
  in
  let gen_names param_and_ty_list =
    String.concat ", " (List.map (fun (name, _) -> name) param_and_ty_list)
  in
  let container_param_and_ty = ("c", "struct lxc_container *") in
  let other_param_and_ty =
    other_param_tys |> List.mapi (fun i ty -> (Printf.sprintf "a%d" i, ty))
  in
  let params = container_param_and_ty :: other_param_and_ty in
  Printf.printf "%s %s%s(%s) {\n" ret_ty func_name func_name_suffix
    (gen_func_arg_field params);
  Printf.printf "  return c->%s(%s);\n" func_name (gen_names params);
  print_endline "}";
  print_newline ()

let c_type_to_ocaml_type s =
  let rec aux acc count =
    if count = 0 then acc else aux (Printf.sprintf "ptr (%s)" acc) (pred count)
  in
  match s with
  | "char *" ->
    "ptr char"
  | "const char *" ->
    "string"
  | "struct lxc_container *" ->
    "ptr lxc_container"
  | "struct lxc_mount *" ->
    "ptr Lxc_mount.t"
  | "pid_t" ->
    "Posix.pid_t"
  | _ ->
    let re = Str.regexp_string "*" in
    let splits = Str.full_split re s in
    let pointer_count =
      splits
      |> List.filter (fun s ->
          match s with Str.Delim _ -> true | _ -> false)
      |> List.length
    in
    aux (strip_chars "*" s) pointer_count

let gen_lxc_container_funptr_field {func_name; other_param_tys; ret_ty} =
  Printf.printf "let %s =\n" func_name;
  Printf.printf "  field lxc_container \"%s\"\n" func_name;
  Printf.printf "    (static_funptr\n";
  Printf.printf "       (%s\n"
    (String.concat " @-> "
       ("ptr lxc_container" :: List.map c_type_to_ocaml_type other_param_tys));
  Printf.printf "        @-> returning %s))\n" (c_type_to_ocaml_type ret_ty);
  ()

(* let gen_lxc_container_funptr_field_ml_glue
 *     {func_name; param_tys; ret_ty} =
 *   let gen_func_arg_field param_and_ty_list =
 *     String.concat ", "
 *       (List.map
 *          (fun (name, ty) -> Printf.sprintf "%s %s" ty name)
 *          param_and_ty_list)
 *   in
 *   let gen_names param_and_ty_list =
 *     String.concat ", " (List.map (fun (name, _) -> name) param_and_ty_list)
 *   in *)

let funptr_records =
  [ {ret_ty = "bool"; func_name = "is_defined"; other_param_tys = []}
  ; {ret_ty = "const char *"; func_name = "state"; other_param_tys = []}
  ; {ret_ty = "bool"; func_name = "is_running"; other_param_tys = []}
  ; {ret_ty = "bool"; func_name = "freeze"; other_param_tys = []}
  ; {ret_ty = "bool"; func_name = "unfreeze"; other_param_tys = []}
  ; {ret_ty = "pid_t"; func_name = "init_pid"; other_param_tys = []}
  ; { ret_ty = "bool"
    ; func_name = "load_config"
    ; other_param_tys = ["const char *"] } ]

let func_name_suffix = "_glue"

(* let () = *)
(* List.iter (gen_lxc_container_funptr_field_c_glue ~func_name_suffix) funptr_records *)
(* List.iter gen_lxc_container_funptr_field funptr_records *)
